import os
import asyncio
import random
import aiohttp
from telethon import TelegramClient, events
from dotenv import load_dotenv

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
load_dotenv()

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
API_ID = "20716719"
API_HASH = "c929824683800816ddf0faac845d89c9"
BOT_TOKEN = "7867830008:AAE9ljH11pHuGVRA9XcwGYhoTYVnEP5cvHE"

# ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API ‡¶è‡¶®‡ßç‡¶°‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü
API_ENDPOINT = "https://molecular-angel-itachivai-e6c91c4d.koyeb.app/up"

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
user_data = {}

# ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

async def upload_video_to_api(file_path):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        with open(file_path, 'rb') as f:
            files = {'video': f}
            response = requests.post(API_ENDPOINT, files=files)
        
        if response.status_code == 202:
            return response.json()  # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        else:
            return None
    except Exception as e:
        print(f"Error uploading video: {e}")
        return None

async def check_processing_status(process_id):
    """‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        check_url = f"{API_ENDPOINT.rsplit('/',1)[0]}/check_status/{process_id}"
        response = requests.get(check_url, headers={'Accept': 'application/json'})
        
        if response.status_code == 200:
            return response.json()  # ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        else:
            return None
    except Exception as e:
        print(f"Error checking status: {e}")
        return None

async def generate_ai_content(anime, episode, random_id):
    """‡¶è‡¶Ü‡¶á ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        async with aiohttp.ClientSession() as session:
            # ‡¶°‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
            desc_params = {
                "q": f"Write a description for episode number {episode} of {anime}. 20-25 words. Only description.",
                "id": random_id
            }
            async with session.get("https://new-ai-buxr.onrender.com/ai", params=desc_params) as response:
                desc_response = await response.json()
                description = desc_response.get("response", "‡¶°‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!")

            # ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
            title_params = {
                "q": f"Write the title of episode number {episode} of {anime}. Only title and No additional symbols or text may be written. There's no need to bold the text, just give it normally.",
                "id": random_id
            }
            async with session.get("https://new-ai-buxr.onrender.com/ai", params=title_params) as response:
                title_response = await response.json()
                title = title_response.get("response", "‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!")
        
        return {"title": title, "description": description}
    except Exception as e:
        return {"error": f"‡¶è‡¶Ü‡¶á ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"}

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user_id = event.sender_id
    user_data[user_id] = {
        "anime": None,
        "thumbnail_link": None,
        "anime_number": None,
        "season_number": None,
        "episodes": []  # ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
    }
    await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®:")

@client.on(events.NewMessage)
async def handle_input(event):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç"""
    user_id = event.sender_id
    if user_id not in user_data:
        await event.reply("‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    user_info = user_data[user_id]
    text = event.message.text.strip()

    if user_info["anime"] is None:
        user_info["anime"] = text
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")
    elif user_info["thumbnail_link"] is None:
        user_info["thumbnail_link"] = text
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:")
    elif user_info["anime_number"] is None:
        user_info["anime_number"] = text
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá ‡¶∏‡¶ø‡¶ú‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:")
    elif user_info["season_number"] is None:
        user_info["season_number"] = text
        user_info["episodes"].append({
            "episode": None,
            "hd_link": None,
            "sd_link": None,
            "title": None,
            "description": None
        })
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:")
    elif not user_info["episodes"]:
        pass
    else:
        current_episode_data = user_info["episodes"][-1]

        if current_episode_data["episode"] is None:
            current_episode_data["episode"] = text
            await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá HD ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")
        elif current_episode_data["hd_link"] is None:
            current_episode_data["hd_link"] = text
            await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá SD ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")
        elif current_episode_data["sd_link"] is None:
            current_episode_data["sd_link"] = text
            await event.reply("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®")
        elif text.lower() == '/send':
            asyncio.create_task(send_data(event))  # Create a new task for each user's send_data request
        else:
            await event.reply("‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ /start ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")

async def send_data(event):
    """‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user_id = event.sender_id
    if user_id not in user_data:
        await event.reply("‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    user_info = user_data[user_id]
    episodes_data = user_info["episodes"]

    if not episodes_data:
        await event.reply("‡¶ï‡ßã‡¶® ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á‡•§")
        return

    await event.reply(f"‡¶Æ‡ßã‡¶ü {len(episodes_data)} ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

    # Process episodes sequentially for each user
    for episode_data in user_info["episodes"]:
        await process_episode_data(event, user_info, episode_data)

    del user_data[user_id]  # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶®

async def process_episode_data(event, user_info, episode_data):
    """‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        await event.reply(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

        random_id = random.randint(1000, 9999)
        ai_content = await generate_ai_content(user_info["anime"], episode_data["episode"], random_id)

        if "error" in ai_content:
            await event.reply(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} AI ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {ai_content['error']}")
            return

        episode_data["title"] = ai_content["title"]
        episode_data["description"] = ai_content["description"]

        # HD ‡¶è‡¶¨‡¶Ç SD ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
        hd_link = await upload_video_to_api(episode_data["hd_link"])
        sd_link = await upload_video_to_api(episode_data["sd_link"])

        if hd_link is None or sd_link is None:
            await event.reply(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
            return

        api_url = "https://nekofilx.onrender.com/ad"
        params = {
            "a": user_info["anime_number"],
            "s": user_info["season_number"],
            "t": episode_data["title"],
            "720p": hd_link,
            "480p": sd_link,
            "th": user_info["thumbnail_link"],
            "d": episode_data["description"],
            "eps": episode_data["episode"]
        }

        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, params=params) as response:
                api_data = await response.json()
                if api_data.get("status") == "success":
                    await event.reply(f"‚úÖ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\n"
                                    f"üé¨ ‡¶è‡¶®‡¶ø‡¶Æ‡ßá ‡¶Ü‡¶á‡¶°‡¶ø: {api_data['anime_id']}\n"
                                    f"üî¢ ‡¶∏‡¶ø‡¶ú‡¶®: {api_data['season']}\n"
                                    f"üìù ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: {api_data['message']}")
                else:
                    await event.reply(f"‚ùå ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {api_data.get('message', 'No message')}")

    except Exception as e:
        await event.reply(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
print("‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá...")
client.run_until_disconnected()
