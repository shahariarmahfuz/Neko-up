import os
import asyncio
import requests
from telethon import TelegramClient, events
from dotenv import load_dotenv
import random
import aiohttp

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
load_dotenv()

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
API_ID = "20716719"
API_HASH = "c929824683800816ddf0faac845d89c9"
BOT_TOKEN = "7867830008:AAE9ljH11pHuGVRA9XcwGYhoTYVnEP5cvHE"

# ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API ‡¶è‡¶®‡ßç‡¶°‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü
# ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü (removed as per request, using /up endpoint now)
# API_ENDPOINT = os.getenv("FLASK_API_ENDPOINT")

# Nekosfast API endpoint for video upload
VIDEO_UPLOAD_ENDPOINT = "https://molecular-angel-itachivai-e6c91c4d.koyeb.app/up"
AI_CONTENT_ENDPOINT = "https://new-ai-buxr.onrender.com/ai"
ADD_EPISODE_API_URL = "https://nekofilx.onrender.com/ad"


# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø (Telethon context is different, using a simple dict for now)
user_data = {}

# ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

async def generate_ai_content(anime, episode, random_id):
    """‡¶è‡¶Ü‡¶á ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    episode_data = {
        "title": None,
        "description": None,
    }
    try:
        async with aiohttp.ClientSession() as session:
            # ‡¶°‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
            desc_params = {
                "q": f"Write a description for episode number {episode} of {anime}. 20-25 words. Only description.",
                "id": random_id
            }
            async with session.get(AI_CONTENT_ENDPOINT, params=desc_params) as response:
                desc_response = await response.json()
                episode_data["description"] = desc_response.get("response", "‡¶°‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!")

            # ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
            title_params = {
                "q": f"Write the title of episode number {episode} of {anime}. Only title and No additional symbols or text may be written. There's no need to bold the text, just give it normally.",
                "id": random_id
            }
            async with session.get(AI_CONTENT_ENDPOINT, params=title_params) as response:
                title_response = await response.json()
                episode_data["title"] = title_response.get("response", "‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ!")
        return episode_data
    except Exception as e:
        return {"error": f"‡¶è‡¶Ü‡¶á ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"}

async def upload_video_to_nekosfast(file_path):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ Nekosfast API-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        video_params = {"up": ""} # file path will be handled by aiohttp
        async with aiohttp.ClientSession() as session_video_upload:
            with open(file_path, 'rb') as f:
                files = {'video': f}
                async with session_video_upload.post(VIDEO_UPLOAD_ENDPOINT, data=files) as response_video_upload: # Changed to data=files for file upload
                    if response_video_upload.status == 200:
                        video_data = await response_video_upload.json()
                        if video_data.get("success"):
                            hd_link = video_data["links"].get("hd", "‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                            sd_link = video_data["links"].get("sd", "‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                            return {"hd_link": hd_link, "sd_link": sd_link}
                        else:
                            return None
                    else:
                        return None
    except Exception as e:
        print(f"Error uploading video: {e}")
        return None


@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user_id = event.sender_id
    user_data[user_id] = {
        "anime": None,
        "thumbnail_link": None,
        "anime_number": None,
        "season_number": None,
        "episodes": [],
        "awaiting_hd_video": False,
        "awaiting_sd_video": False,
        "current_episode_index": -1 # Track current episode being processed
    }
    await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®:")

@client.on(events.NewMessage(pattern='/preview'))
async def show_preview_all(event):
    """‡¶∏‡¶ï‡¶≤ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã"""
    user_id = event.sender_id
    if user_id not in user_data:
        await event.reply("‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    user_info = user_data[user_id]

    preview_message_all = "üé¨ ‡¶∏‡¶ï‡¶≤ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â:\n\n"
    for episode_data in user_info["episodes"]:
        preview_message_all += (
            f"üì∫ ‡¶è‡¶®‡¶ø‡¶Æ‡ßá: {user_info['anime']}\n"
            f"üî¢ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°: {episode_data['episode']}\n"
            f"üé¨ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤: {episode_data['title'] or '‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶π‡¶¨‡ßá ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞'}\n"
            f"üìù ‡¶°‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®: {episode_data['description'] or '‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶π‡¶¨‡ßá ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞'}\n"
            f"üñºÔ∏è ‡¶•‡¶æ‡¶Æ‡¶®‡¶æ‡¶á‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï: {user_info['thumbnail_link']}\n"
            f"üîó HD ‡¶≤‡¶ø‡¶Ç‡¶ï: {episode_data['hd_link'] or '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá'}\n"
            f"üîó SD ‡¶≤‡¶ø‡¶Ç‡¶ï: {episode_data['sd_link'] or '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá'}\n\n"
            "------------------------\n"
        )
    preview_message_all += "‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡ßá, /send ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    await event.reply(preview_message_all)


@client.on(events.NewMessage(pattern='/send'))
async def send_data_command(event):
    """‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    await send_data(event)


async def send_data(event):
    """‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user_id = event.sender_id
    if user_id not in user_data:
        await event.reply("‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    user_info = user_data[user_id]
    episodes_data = user_info["episodes"]

    if not episodes_data:
        await event.reply("‡¶ï‡ßã‡¶® ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á‡•§")
        return

    await event.reply(f"‡¶Æ‡ßã‡¶ü {len(episodes_data)} ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

    all_success_messages = []
    all_error_messages = []

    for index, episode_data in enumerate(user_info["episodes"]):
        success_messages, error_messages = await process_episode_data(event, user_info, episode_data, index) # Pass index
        if success_messages:
            all_success_messages.extend(success_messages)
        if error_messages:
            all_error_messages.extend(error_messages)

    if all_error_messages and not all_success_messages:
        final_response_message = "‚ö†Ô∏è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n" + "\n".join(all_error_messages)
        await event.reply(final_response_message)
    elif all_error_messages and all_success_messages:
        final_response_message = "‚ö†Ô∏è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n" + "\n".join(all_error_messages)
        await event.reply(final_response_message)
    elif all_success_messages and not all_error_messages:
        pass # Success messages are already sent episode by episode
    elif not all_success_messages and not all_error_messages:
        await event.reply("‡¶ï‡ßã‡¶® ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§")

    del user_data[user_id]


async def process_episode_data(event, user_info, episode_data, episode_index): # Added episode_index
    success_messages = []
    error_messages = []
    try:
        await event.reply(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

        random_id = random.randint(1000, 9999)
        ai_content = await generate_ai_content(user_info["anime"], episode_data["episode"], random_id)

        if "error" in ai_content:
            error_messages.append(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} AI ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {ai_content['error']}")
            return None, error_messages

        episode_data["title"] = ai_content["title"]
        episode_data["description"] = ai_content["description"]

        hd_video_path = episode_data.get("hd_video_path")
        sd_video_path = episode_data.get("sd_video_path")

        if hd_video_path and sd_video_path: # Proceed only if both video paths are available
            await event.reply(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} - ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            hd_video_links = await upload_video_to_nekosfast(hd_video_path)
            await event.reply(f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} - ‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            sd_video_links = await upload_video_to_nekosfast(sd_video_path)

            if hd_video_links and sd_video_links:
                episode_data["hd_link"] = hd_video_links.get("hd_link")
                episode_data["sd_link"] = sd_video_links.get("sd_link")

                api_url = ADD_EPISODE_API_URL
                params = {
                    "a": user_info["anime_number"],
                    "s": user_info["season_number"],
                    "t": episode_data["title"],
                    "720p": episode_data["hd_link"],
                    "480p": episode_data["sd_link"],
                    "th": user_info["thumbnail_link"],
                    "d": episode_data["description"],
                    "eps": episode_data["episode"]
                }

                async with aiohttp.ClientSession() as session_api:
                    async with session_api.get(api_url, params=params) as response_api:
                        api_data = await response_api.json()
                        if api_data.get("status") == "success":
                            response_message = (
                                f"‚úÖ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\n"
                                f"üé¨ ‡¶è‡¶®‡¶ø‡¶Æ‡ßá ‡¶Ü‡¶á‡¶°‡¶ø: {api_data['anime_id']}\n"
                                f"üî¢ ‡¶∏‡¶ø‡¶ú‡¶®: {api_data['season']}\n"
                                f"üìù ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: {api_data['message']}\n\n"
                                "‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶§‡¶•‡ßç‡¶Ø:\n"
                                f"üÜî ‡¶Ü‡¶á‡¶°‡¶ø: {api_data['video']['id']}\n"
                                f"üî¢ ‡¶∏‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤: {api_data['video']['serial']}\n"
                                f"üé¨ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤: {api_data['video']['title']}\n"
                                f"üìù ‡¶°‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®: {api_data['video']['description']}\n"
                                f"üñºÔ∏è ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡¶æ‡¶á‡¶≤: {api_data['video']['thumbnail']}\n"
                                f"üîó HD: {api_data['video']['links']['720p']}\n"
                                f"üîó SD: {api_data['video']['links']['480p']}"
                            )
                            success_messages.append(response_message)
                            await event.reply(response_message)
                        else:
                            error_message = f"‚ùå ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {api_data.get('message', 'No message')}"
                            error_messages.append(error_message)
                            await event.reply(error_message)
            else:
                error_message = f"‚ùå ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§"
                error_messages.append(error_message)
                await event.reply(error_message)
        else:
             error_message = f"‚ùå ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶ì ‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§";
             error_messages.append(error_message)
             await event.reply(error_message)


        await asyncio.sleep(5)

    except Exception as e:
        error_message = f"‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° {episode_data['episode']} API request error: {str(e)}"
        error_messages.append(error_message)
        await event.reply(error_message)
    finally:
        if episode_data.get("hd_video_path") and os.path.exists(episode_data["hd_video_path"]):
            os.remove(episode_data["hd_video_path"]) # Delete temp HD file
        if episode_data.get("sd_video_path") and os.path.exists(episode_data["sd_video_path"]):
            os.remove(episode_data["sd_video_path"]) # Delete temp SD file
    return success_messages, error_messages


@client.on(events.NewMessage)
async def handle_input(event):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç"""
    user_id = event.sender_id
    if user_id not in user_data:
        return # Ignore if user not started

    user_info = user_data[user_id]
    message_text = event.message.text.strip()

    if user_info["anime"] is None:
        user_info["anime"] = message_text
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")
    elif user_info["thumbnail_link"] is None:
        user_info["thumbnail_link"] = message_text
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:")
    elif user_info["anime_number"] is None:
        user_info["anime_number"] = message_text
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶®‡¶ø‡¶Æ‡ßá ‡¶∏‡¶ø‡¶ú‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:")
    elif user_info["season_number"] is None:
        user_info["season_number"] = message_text
        user_info["current_episode_index"] += 1 # Increment episode index
        user_info["episodes"].append({
            "episode": None,
            "hd_video_path": None,
            "sd_video_path": None,
            "title": None,
            "description": None,
            "hd_link": None,
            "sd_link": None
        })
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:")
    elif user_info["episodes"] and user_info["episodes"][user_info["current_episode_index"]]["episode"] is None:
        current_episode_data = user_info["episodes"][user_info["current_episode_index"]]
        current_episode_data["episode"] = message_text
        user_info["awaiting_hd_video"] = True # Awaiting HD video next
        await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:")

@client.on(events.NewMessage(func=lambda e: e.message.media and hasattr(e.message.media, 'document')))
async def handle_video_upload(event):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user_id = event.sender_id
    if user_id not in user_data:
        return

    user_info = user_data[user_id]
    current_episode_data = None
    if user_info["episodes"]:
        current_episode_data = user_info["episodes"][user_info["current_episode_index"]]

    if user_info["awaiting_hd_video"] and current_episode_data:
        if event.message.video:
            try:
                hd_temp_file = f"temp_hd_{event.message.id}_{user_id}.mp4"
                await event.download_media(file=hd_temp_file)
                current_episode_data["hd_video_path"] = hd_temp_file
                user_info["awaiting_hd_video"] = False
                user_info["awaiting_sd_video"] = True # Now awaiting SD video
                await event.reply("‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:")
            except Exception as e:
                await event.reply(f"‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
                user_info["awaiting_hd_video"] = False # Reset state on error
                user_info["awaiting_sd_video"] = False
        else:
            await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§") # Remind to upload video if not video
    elif user_info["awaiting_sd_video"] and current_episode_data:
        if event.message.video:
            try:
                sd_temp_file = f"temp_sd_{event.message.id}_{user_id}.mp4"
                await event.download_media(file=sd_temp_file)
                current_episode_data["sd_video_path"] = sd_temp_file
                user_info["awaiting_sd_video"] = False
                await event.reply("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ /preview ‡¶Ö‡¶•‡¶¨‡¶æ /send ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®")
            except Exception as e:
                await event.reply(f"‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
                user_info["awaiting_sd_video"] = False # Reset state on error
        else:
            await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§") # Remind to upload video if not video
    elif event.message.text and user_info["episodes"]:
        current_episode_data = user_info["episodes"][user_info["current_episode_index"]]
        text = event.message.text.strip()
        if text.isdigit():
            user_info["current_episode_index"] += 1 # Increment episode index for new episode
            user_info["episodes"].append({
                "episode": text,
                "hd_video_path": None,
                "sd_video_path": None,
                "title": None,
                "description": None,
                "hd_link": None,
                "sd_link": None
            })
            user_info["awaiting_hd_video"] = True # Awaiting HD video for new episode
            await event.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:")

        elif text.lower() == '/send':
             await send_data_command(event) # call send data when user types /send
        elif text.lower() == '/preview':
            await show_preview_all(event)
        else:
            await event.reply("‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ /start ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")


# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
print("Bot is running...")
client.run_until_disconnected()
